{"/home/travis/build/npmtest/node-npmtest-sourced-repo-mongo/test.js":"/* istanbul instrument in package npmtest_sourced_repo_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sourced-repo-mongo/lib.npmtest_sourced_repo_mongo.js":"/* istanbul instrument in package npmtest_sourced_repo_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sourced_repo_mongo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sourced_repo_mongo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sourced-repo-mongo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sourced-repo-mongo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sourced_repo_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sourced_repo_mongo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sourced_repo_mongo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sourced_repo_mongo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sourced_repo_mongo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sourced_repo_mongo.__dirname + '/lib.npmtest_sourced_repo_mongo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sourced-repo-mongo/node_modules/sourced-repo-mongo/index.js":"var Entity = require('sourced').Entity;\nvar EventEmitter = require('events').EventEmitter;\nvar log = require('debug')('sourced-repo-mongo');\nvar mongo = require('./mongo');\nvar util = require('util');\nvar _ = require('lodash');\n\nfunction Repository (entityType, options) {\n  options = options || {};\n  EventEmitter.call(this);\n  if ( ! mongo.db) {\n    throw new Error('mongo has not been initialized. you must call require(\\'sourced-repo-mongo/mongo\\').connect(config.MONGO_URL); before instantiating a Repository');\n  }\n  var indices = _.union(options.indices, ['id']);\n  var self = this;\n  var db = mongo.db;\n  self.entityType = entityType;\n  self.indices = indices;\n  self.snapshotFrequency = options.snapshotFrequency || 10;\n\n  var snapshotCollectionName = util.format('%s.snapshots', entityType.name);\n  var snapshots = db.collection(snapshotCollectionName);\n  self.snapshots = snapshots;\n  var eventCollectionName = util.format('%s.events', entityType.name);\n  var events = db.collection(eventCollectionName);\n  self.events = events;\n\n  var error = function (err) {\n    if (err) return self.emit('error', err);\n  };\n\n  self.indices.forEach(function (index) {\n    snapshots.ensureIndex(index, error);\n    events.ensureIndex(index, error);\n  });\n  events.ensureIndex({ id: 1, version: 1 }, error);\n  snapshots.ensureIndex({ id: 1, version: 1 }, error);\n  snapshots.ensureIndex('snapshotVersion', error);\n\n  log('initialized %s entity store', self.entityType.name);\n\n  self.emit('ready');\n}\n\nutil.inherits(Repository, EventEmitter);\n\nRepository.prototype.commit = function commit (entity, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  var self = this;\n\n  log('committing %s for id %s', this.entityType.name, entity.id);\n\n  this._commitEvents(entity, function _afterCommitEvents (err) {\n    if (err) return cb(err);\n\n    self._commitSnapshots(entity, options, function _afterCommitSnapshots (err) {\n      if (err) return cb(err);\n      self._emitEvents(entity);\n      return cb();\n    });\n  });\n\n};\n\nRepository.prototype.commitAll = function commit (entities, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  var self = this;\n\n  log('committing %s for id %j', this.entityType.name, _.pluck(entities, 'id'));\n\n  this._commitAllEvents(entities, function _afterCommitEvents (err) {\n    if (err) return cb(err);\n    self._commitAllSnapshots(entities, options, function _afterCommitSnapshots (err) {\n      if (err) return cb(err);\n      entities.forEach(function (entity) {\n        self._emitEvents(entity);\n      });\n      return cb();\n    });\n  });\n\n};\n\nRepository.prototype.get = function get (id, cb) {\n  return this._getByIndex('id', id, cb);\n};\n\nRepository.prototype._getByIndex = function _getByIndex (index, value, cb) {\n  var self = this;\n\n  if (this.indices.indexOf(index) === -1) throw new Error('Cannot get sourced entity type [%s] by index [%s]', this.entityType, index);\n\n  log('getting %s for %s %s', this.entityType.name, index, value);\n\n  var criteria = { };\n  criteria[index] = value;\n\n  this.snapshots\n    .find(criteria)\n    .sort({ version: -1 })\n    .limit(-1)\n    .toArray(function (err, snapshots) {\n      if (err) return cb(err);\n\n      var snapshot = snapshots[0];\n\n      if (snapshot) criteria.version = { $gt: snapshot.version };\n      self.events.find(criteria)\n        .sort({ version: 1 })\n        .toArray(function (err, events) {\n          if (err) return cb(err);\n          if (snapshot) delete snapshot._id;\n          if ( ! snapshot && ! events.length) return cb(null, null);\n\n          var id = (index === 'id') ? value : (snapshot) ? snapshot.id : events[0].id;\n\n          var entity = self._deserialize(id, snapshot, events);\n          return cb(null, entity);\n        });\n  });\n};\n\nRepository.prototype.getAll = function getAll (ids, cb) {\n  var self = this;\n\n  if (typeof ids === 'function') {\n    cb = ids;\n    ids = null;\n    return this.events.distinct('id', function (err, distinctEventIds) {\n      self.getAll(distinctEventIds, cb);\n    });\n  }\n\n  log('getting %ss for ids %j', this.entityType.name, ids);\n\n  if (ids.length === 0) return cb(null, []);\n\n  this._getAllSnapshots(ids, function _afterGetAllSnapshots (err, snapshots) {\n    if (err) return cb(err);\n    self._getAllEvents(ids, snapshots, function (err, entities) {\n      if (err) return cb(err);\n      return cb(null, entities);\n    });\n  });\n};\n\nRepository.prototype._commitEvents = function _commitEvents (entity, cb) {\n  var self = this;\n\n  if (entity.newEvents.length === 0) return cb();\n\n  if ( ! entity.id) return cb(new Error('Cannot commit an entity of type [%s] without an [id] property', this.entityType));\n\n  var events = entity.newEvents;\n  events.forEach(function _applyIndices (event) {\n    if (event && event._id) delete event._id; // mongo will blow up if we try to insert multiple _id keys\n    self.indices.forEach(function (index) {\n      event[index] = entity[index];\n    });\n  });\n  self.events.insert(events, function (err) {\n    if (err) return cb(err);\n    log('committed %s.events for id %s', self.entityType.name, entity.id);\n    entity.newEvents = [];\n    return cb();\n  });\n\n};\n\nRepository.prototype._commitAllEvents = function _commitEvents (entities, cb) {\n  var self = this;\n\n  var events = [];\n  entities.forEach(function (entity) {\n    if (entity.newEvents.length === 0) return;\n\n    if ( ! entity.id) return cb(new Error('Cannot commit an entity of type [%s] without an [id] property', self.entityType));\n\n    var evnts = entity.newEvents;\n    evnts.forEach(function _applyIndices (event) {\n      if (event && event._id) delete event._id; // mongo will blow up if we try to insert multiple _id keys\n      self.indices.forEach(function (index) {\n        event[index] = entity[index];\n      });\n    });\n    Array.prototype.unshift.apply(events, evnts);\n  });\n\n  if (events.length === 0) return cb();\n\n  self.events.insert(events, function (err) {\n    if (err) return cb(err);\n    log('committed %s.events for ids %j', self.entityType.name, _.pluck(entities, 'id'));\n    entities.forEach(function (entity) {\n      entity.newEvents = [];\n    });\n    return cb();\n  });\n\n};\n\nRepository.prototype._commitSnapshots = function _commitSnapshots (entity, options, cb) {\n  var self = this;\n\n  if (options.forceSnapshot || entity.version >= entity.snapshotVersion + self.snapshotFrequency) {\n    var snapshot = entity.snapshot();\n    if (snapshot && snapshot._id) delete snapshot._id; // mongo will blow up if we try to insert multiple _id keys\n    self.snapshots.insert(snapshot, function (err) {\n      if (err) return cb(err);\n      log('committed %s.snapshot for id %s %j', self.entityType.name, entity.id, snapshot);\n      return cb(null, entity);\n    });\n  } else {\n    return cb(null, entity);\n  }\n\n};\n\nRepository.prototype._commitAllSnapshots = function _commitAllSnapshots (entities, options, cb) {\n  var self = this;\n\n  var snapshots = [];\n  entities.forEach(function (entity) {\n    if (options.forceSnapshot || entity.version >= entity.snapshotVersion + self.snapshotFrequency) {\n      var snapshot = entity.snapshot();\n      if (snapshot) {\n        if (snapshot._id) delete snapshot._id; // mongo will blow up if we try to insert multiple _id keys)\n        snapshots.push(snapshot);\n      }\n    }\n  });\n\n  if (snapshots.length === 0) return cb();\n\n  self.snapshots.insert(snapshots, function (err) {\n    if (err) return cb(err);\n    log('committed %s.snapshot for ids %s %j', self.entityType.name, _.pluck(entities, 'id'), snapshots);\n    return cb(null, entities);\n  });\n\n};\n\nRepository.prototype._deserialize = function _deserialize (id, snapshot, events) {\n  log('deserializing %s entity ', this.entityType.name);\n  var entity = new this.entityType(snapshot, events);\n  entity.id = id;\n  return entity;\n};\n\nRepository.prototype._emitEvents = function _emitEvents (entity) {\n  var self = this;\n\n  var eventsToEmit = entity.eventsToEmit;\n  entity.eventsToEmit = [];\n  eventsToEmit.forEach(function (eventToEmit) {\n    var args = Array.prototype.slice.call(eventToEmit);\n    self.entityType.prototype.emit.apply(entity, args);\n  });\n\n  log('emitted local events for id %s', entity.id);\n\n};\n\nRepository.prototype._getAllSnapshots = function _getAllSnapshots (ids, cb) {\n  var self = this;\n\n  var match = { $match: { id: { $in: ids } } };\n  var sort = { $sort: { snapshotVersion: 1 } };\n  var group = { $group: { _id: '$id', snapshotVersion: { $last: '$snapshotVersion' } } };\n\n  self.snapshots.aggregate([match, sort, group], function (err, idVersionPairs) {\n    if (err) return cb(err);\n    var criteria = {};\n    if (idVersionPairs.length === 0) {\n      return cb(null, []);\n    } else if (idVersionPairs.length === 1) {\n      criteria = { id: idVersionPairs[0]._id, snapshotVersion: idVersionPairs[0].snapshotVersion };\n    } else {\n      criteria.$or = [];\n      idVersionPairs.forEach(function (pair) {\n        var cri = { id: pair._id, snapshotVersion: pair.snapshotVersion };\n        criteria.$or.push(cri);\n      });\n    }\n    self.snapshots\n      .find(criteria)\n      .toArray(function (err, snapshots) {\n        if (err) cb(err);\n        return cb(null, snapshots);\n      });\n  });\n\n};\n\nRepository.prototype._getAllEvents = function _getAllEvents (ids, snapshots, cb) {\n  var self = this;\n\n  var criteria = { $or: [] };\n  ids.forEach(function (id) {\n    var snapshot;\n    if ( ! (snapshot = _.find(snapshots, function (snapshot) {\n      return id === snapshot.id;\n    }))) {\n      criteria.$or.push({ id: id });\n    } else {\n      criteria.$or.push({ id: snapshot.id, version: { $gt: snapshot.snapshotVersion } });\n    }\n  });\n\n  self.events.find(criteria)\n    .sort({ id: 1, version: 1 })\n    .toArray(function (err, events) {\n      if (err) return cb(err);\n      if ( ! snapshots.length && ! events.length) return cb(null, null);\n      var results = [];\n      ids.forEach(function (id) {\n        var snapshot = _.find(snapshots, function (snapshot) {\n          return snapshot.id === id;\n        });\n        if (snapshot) delete snapshot._id;\n        var evnts = _.filter(events, function (event) {\n          return event.id === id;\n        });\n        var entity = self._deserialize(id, snapshot, evnts);\n        results.push(entity);\n      });\n      return cb(null, results);\n    });\n\n};\n\nmodule.exports.Repository = Repository;\n","/home/travis/build/npmtest/node-npmtest-sourced-repo-mongo/node_modules/sourced-repo-mongo/mongo.js":"var EventEmitter = require('events').EventEmitter;\nvar log = require('debug')('sourced-repo-mongo');\nvar client = require('mongodb').MongoClient;\nvar util = require('util');\n\nfunction Mongo () {\n  this.db = null;\n  EventEmitter.call(this);\n}\n\nutil.inherits(Mongo, EventEmitter);\n\nMongo.prototype.connect = function connect (mongoUrl) {\n  var self = this;\n  client.connect(mongoUrl, function (err, db) {\n    if (err) {\n      log('✗ MongoDB Connection Error. Please make sure MongoDB is running: ', err);\n      self.emit('error', err);\n    }\n    self.db = db;\n    log('initialized connection to mongo at %s', mongoUrl);\n    self.emit('connected', db);\n  });\n};\n\nmodule.exports = new Mongo();"}